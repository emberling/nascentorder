# '#' and ';' are comments. If you change something, make sure you also
# uncomment it, unless it's already been uncommented!

[General]
;free_rom_space: 310600-3FFFFF

# by default, NaO will attempt to detect some known romhacks and adjust
# pointers accordingly. Set this to prevent this behavior if you are getting
# false positives.
;skip_hack_detection: True

# 
[Music]
# self explanatory, uncomment to activate
;allow_music_repeats: True

# how often battles will continue playing field music
;field_music_chance: 0

# fixed ROM address to relocate instrument metadata
# If set, this will allocate $600 bytes in the specified location
# (the size needed for $FF total samples).
# If not set, metadata will go into arbitrary free space, using space more
# efficiently but making future changes more difficult.
brr_metadata_target_offset: 310000

# by default, the existing song data will be wiped and replaced,
# preserving only songs that are still used, and repacking them throughout
# the available space. With this flag set, instead no data will be wiped,
# unused songs will not be removed, and existing still-used songs will not
# be moved.
;preserve_song_data: True

# in battle music progression mode, controls the lookup table used by
# battle formations to set music. by default is as unintrusive as possible
# table is eight entries long unless you've hacked it otherwise somehow.
# use either song id or "battle" or "boss" followed by a number
;battle_music_lookup: battle1, boss2, boss3, battle2, battle3, 3B, battle4, boss1

# song ids to use for battle music progression mode (new to add a song id)
# every battle/boss used in battle_music_lookup must be represented here
;battle_music_ids: 24, new, new, new
;boss_music_ids: new, 14, 33

# in battle music progression mode, determines which songs pause field
# song and resume it after battle. without specialized hacks, only
# five of these are available
;pause_current_song: battle1, battle2, battle3, battle4, boss1

### Variables below this line mostly allow you to adjust pointers, for if you
### are using an already hacked FF6 ROM and this data has been moved from where
### we'd usually expect it. This should be especially useful for e.g. using
### this as a tool to insert songs into your hack.
###
### all pointers reflect the hex file offset (i.e. 0/1/2/3, not C/D/E/F) on an
### unheadered rom

[GeneralPtr]
# expected rom size, minimum and maximum, in bytes (hex)
# default minimum is unheadered 1.0 size
# default maximum is headered 32Mbit
# If you're using ExtHiROM feel free to raise this but I understand there
# are some compatibility issues with putting music in that space
;romsize: 300000, 400200

[EnemyPtr]
# monster data
; monsters_loc: F0000, F2FFF
; monsters_size: 20

# battle formation data
;forms_loc: F6200, F83FF
;forms_size: F

# auxiliary battle formation data
;forms_aux: F5900, F61FF
;forms_aux_size: 4

[MusicPtr]
# number of songs byte: default 53C5E
;songcount: 53C5E

# start and end location for BRR pointers
;brrpointers: 53C5F, 53D1B

# start and end location for instrument loop info
;brrloops: 53D1C, 53D99

# start and end location for instrument pitch info
;brrpitch: 53D9A, 53E17

# start and end location for instrument ADSR info
;brradsr: 53E18, 53E95

# start and end location for song pointers
;songpointers: 53E96, 53F94

# start and end location for instrument sets
;instruments: 53F95, 54A34

# pointers to instrument BRR pointers (3x)
;brrpointerpointer: 50222, 50228, 5022E

# pointer to instrument loop data
;brrlooppointer: 5041C

# pointer to instrument pitch data
;brrpitchpointer: 5049C

# pointer to instrument ADSR data
;brradsrpointer: 504DE

# pointer to song pointer location
;songpointerpointer: 50538

# pointer to instrument set location
;instrumentpointer: 501E3

# start and end location for song storage
;songdata: 85C7A, 9FDFF

# songs that pause the current song
;pausesongs: 506F9, 506FD

# battle song table
;battlesongs: 2BF3B, 2BF42

[SpritePtr]
# beginning of character sprites
;spritesheet: 150000

# size of each character sprite 0-15
;spritesizea: 16A0

# size of each character sprite 16-21
;spritesizeb: 1560

# location of character portrait gfx
;portraits: 2D1D00

# character portrait palettes
;portpals: 2D5860

# table assigning portraits to characters
;portptrs: 36F00

# table assigning palettes to characters in battle
;charpalptrs: 2CE2B

# character palette data
;charpals = 2D6300